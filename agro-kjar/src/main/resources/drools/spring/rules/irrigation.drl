package drools.spring.rules;

import com.sbz.agro.model.Reading;
import com.sbz.agro.enums.DeviceReadingTypes;
import com.sbz.agro.model.Device;
import com.sbz.agro.enums.ReadingValues;
import com.sbz.agro.enums.DeviceDetails;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map

import com.sbz.agro_kjar.services.ActuatorService;
import com.sbz.agro_kjar.helpers.DeviceKey;
import com.sbz.agro_kjar.helpers.Utils;

declare Reading
    @role(event)
end

global Integer pumpCapacity;

global ActuatorService actuatorService;

global Map<DeviceKey, Boolean> valveStateMap;// = new HashMap<DeviceKey, boolean>();


rule "Open valve on low moisture"
    agenda-group "irrigation"
    when
        //Checking if its moisture reading with critical low value
        $reading: Reading(  name == DeviceReadingTypes.MOISTURE.name(),
                            $sensor: device
                        ) over window:length(1)
        
         Reading(   name == DeviceReadingTypes.MOISTURE.name(),
                    this == $reading,
                    device.getArray().getField().getMoistureLowerThreshold() > Double.parseDouble(value)
                )
        //Check if there was raining in the last hour
         not (Reading(
            $sensor.array.id == device.array.id,
            value == ReadingValues.ON.name(),
            name == DeviceReadingTypes.RAIN.name()
          ) over window:time(2s))

        //Get valve which is on the same position as sensor which sent reading
        $valve: Device(
                    array.id == $sensor.array.id,
                    position == $sensor.position,
                    type == DeviceDetails.VALVE);

        //Get last status of the valve
        $valveStatus: Reading(
                        device.id == $valve.id,
                        name == DeviceReadingTypes.STATUS.name()
                        ) over window:length(1)

        //that status must be OK
        Reading(value == ReadingValues.OK.name()) from $valveStatus

        //Get last open/closed state of valve
        $valveState: Reading(
                        device.id == $valve.id,
                        name ==  DeviceReadingTypes.STATE.name()
                        ) over window:length(1)

        //If we want to open valve - it must be currently closed
        Reading($valveState == this, value == ReadingValues.OFF.name())
    then
        System.out.println("-- Low moisture found, should open valve --");
        actuatorService.SendActuation($valve.getSerialNo(), "ON");
        DeviceKey dk = new DeviceKey($valve.getArray().getId(), $valve.getId());
        valveStateMap.put(dk, true);
end

rule "Close valve on high moisture"
    agenda-group "irrigation"
    when
                //Checking if its moisture reading with critical low value
        $reading: Reading(  name == DeviceReadingTypes.MOISTURE.name(),
                            $sensor: device
                        ) over window:length(1)
        
         Reading(   name == DeviceReadingTypes.MOISTURE.name(),
                    this == $reading,
                    device.getArray().getField().getMoistureUpperThreshold() < Double.parseDouble(value)
                )

        //Get valve which is on the same position as sensor which sent reading
        $valve: Device( array.id == $sensor.array.id,
                        position == $sensor.position,
                        type == DeviceDetails.VALVE);

        //Get last status of the valve
        $valveStatus: Reading(
                            device.id == $valve.id,
                            name == DeviceReadingTypes.STATUS.name()
                            ) over window:length(1)

        //that status must be OK
        Reading($valveStatus == this, value == ReadingValues.OK.name())

        //Get last open/closed state of valve
        $valveState: Reading(
                            device.id == $valve.id,
                            name ==  DeviceReadingTypes.STATE.name()
                            ) over window:length(1)

        //If we want to close valve - it must be currently opened
        Reading($valveState == this, value == ReadingValues.ON.name())
    then
        System.out.println("-- High moisture found, should close valve --");
        actuatorService.SendActuation($valve.getSerialNo(), "OFF");
        DeviceKey dk = new DeviceKey($valve.getArray().getId(), $valve.getId());
        valveStateMap.put(dk, false);
end

rule "Open pump"
    agenda-group "irrigation"
    when
        //Received valve reading - ON
        $openValveReading: Reading(
                            name == DeviceReadingTypes.STATE.name(),
                            device.type == DeviceDetails.VALVE,
                            $valve: device
                            ) over window:length(1)
                            
        Reading( device.type == DeviceDetails.VALVE,
                 name == DeviceReadingTypes.STATE.name(),
                 value == ReadingValues.ON.name(),
                 $openValveReading == this
                )

        //Get pump on that array
        $pump: Device(type == DeviceDetails.PUMP,
                      array.getId() == $valve.getArray().getId(),
                      array.getField().getId() == $valve.getArray().getField().getId() );

        //Getting last status of pump
        $pumpStatus: Reading(
                   device.id == $pump.id,
                   name == DeviceReadingTypes.STATUS.name()
                ) over window:length(1)
        //Last status must be OK
        Reading($pumpStatus == this, value == ReadingValues.OK.name());

        //Getting last on/off state of the pump
        $pumpState: Reading(
                        device.id == $pump.id,
                        device.type == DeviceDetails.PUMP,
                        name ==  DeviceReadingTypes.STATE.name()
                    ) over window:length(1)

        //If we want to open pump - it must be currently closed
        Reading($pumpState == this, value == ReadingValues.OFF.name());

    then
        System.out.println("-- Valve in array exists, should open pump--");
        actuatorService.SendActuation($pump.getSerialNo(), "ON");
end

rule "Close pump"
    agenda-group "irrigation"
    when
        //Received valve reading - OFF
        $openValveReading: Reading(
                            name == DeviceReadingTypes.STATE.name(),
                            device.type == DeviceDetails.VALVE,
                            $valve: device
                            ) over window:length(1)
                            
        Reading( device.type == DeviceDetails.VALVE,
                 name == DeviceReadingTypes.STATE.name(),
                 value == ReadingValues.OFF.name(),
                 $openValveReading == this
                )
                
        //Get pump on that array
        $pump: Device(type == DeviceDetails.PUMP,
                      array.getId() == $valve.getArray().getId(),
                      array.getField().getId() == $valve.getArray().getField().getId() );

        //Getting last status of pump
        $pumpStatus: Reading(
                   device.id == $pump.id,
                   name == DeviceReadingTypes.STATUS.name()
                ) over window:length(1)
        //Last status must be OK
        Reading($pumpStatus == this, value == ReadingValues.OK.name());
        
        //Getting last on/off state of the pump
        $pumpState: Reading(
                        device.id == $pump.id,
                        device.type == DeviceDetails.PUMP,
                        name ==  DeviceReadingTypes.STATE.name()
                    ) over window:length(1)
        
        //If we want to close pump - it must be currently opened
        Reading($pumpState == this, value == ReadingValues.ON.name());
        
        // In order to close pump - all valves must be off
        $number : Integer( this == 0 ) from Utils.openedValvesOfArray($valve.getArray().getId(), valveStateMap);
    then
        System.out.println("-- No opened valve in array, should close pump--");
        actuatorService.SendActuation($pump.getSerialNo(), "OFF");
end

rule "Close valves since it is raining"
    agenda-group "irrigation"
    when
        //Checking if its moisture reading with critical low value
        $reading: Reading( name == DeviceReadingTypes.RAIN.name(),
                           $sensor: device,
                           value == ReadingValues.ON.name()
                        );
                        
        //There should be not a single false value
        $sizeOfArray: Number( intValue == 0) from accumulate(
            $r: Reading($sensor.array.id == device.array.id,
                        value == ReadingValues.OFF.name(),
                        name == DeviceReadingTypes.RAIN.name()
                        ) over window:time( 10s ),
                    count($r)
                    )
        // In order to initiate closing - must have some valve opened
        $number : Integer( this > 0 ) from Utils.openedValvesOfArray($sensor.getArray().getId(), valveStateMap);

    then
        System.out.println("-- It is raining for half an hour - close valves --   " + $sizeOfArray);
        
        for(Device val : $sensor.getArray().getValves()) {
            DeviceKey dk = new DeviceKey($sensor.getArray().getId(), val.getId());
            valveStateMap.put(dk, false);
            actuatorService.SendActuation(val.getSerialNo(), "OFF");
        }
end